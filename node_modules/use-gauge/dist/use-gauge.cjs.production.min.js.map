{"version":3,"file":"use-gauge.cjs.production.min.js","sources":["../src/lib.ts","../src/index.tsx"],"sourcesContent":["export const degreesToRadians = (degrees: number) => {\n  return (degrees * Math.PI) / 180;\n};\n\nexport const makeTickMarks = (\n  minAngle: number,\n  maxAngle: number,\n  numTicks: number\n) => {\n  const tickMarks = [];\n  const angleRange = maxAngle - minAngle;\n  const angleStep = angleRange / (numTicks - 1);\n  for (let i = 0; i < numTicks; i++) {\n    tickMarks.push(Math.floor(minAngle + i * angleStep));\n  }\n  return tickMarks.reverse();\n};\n\nexport const polarToCartesian = (\n  centerX: number,\n  centerY: number,\n  radius: number,\n  angleInDegrees: number\n) => {\n  const angleInRadians = degreesToRadians(angleInDegrees);\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians),\n  };\n};\n","import { useCallback, useMemo } from 'react';\nimport { degreesToRadians, makeTickMarks, polarToCartesian } from './lib';\n\ninterface UseGaugeParams {\n  diameter: number;\n  startAngle: number;\n  endAngle: number;\n  numTicks: number;\n  domain: [number, number];\n}\n\ninterface GetNeedleParams {\n  value: number;\n  baseRadius: number;\n  tipRadius: number;\n}\n\ninterface GetTickPropsParams {\n  length: number;\n  angle: number;\n}\n\ninterface GetLabelPropsParams {\n  angle: number;\n  offset: number;\n}\n\ninterface GetArcPropsParams {\n  offset?: number;\n  startAngle: number;\n  endAngle: number;\n}\n\nexport function useGauge(params: UseGaugeParams) {\n  const { startAngle, endAngle, numTicks, diameter, domain } = params;\n  const radius = diameter / 2;\n  const [minValue, maxValue] = domain;\n\n  const ticks = useMemo(() => {\n    return makeTickMarks(startAngle, endAngle, numTicks).reverse();\n  }, [startAngle, endAngle, numTicks]);\n\n  const getLabelProps = useCallback(\n    (params: GetLabelPropsParams) => {\n      const { angle, offset } = params;\n      const p1 = polarToCartesian(0, 0, radius - offset, angle + 90);\n\n      return {\n        x: p1.x,\n        y: p1.y,\n        dominantBaseline: 'middle',\n        textAnchor: 'middle',\n      };\n    },\n    [diameter, radius]\n  );\n\n  const getTickProps = useCallback(\n    (params: GetTickPropsParams) => {\n      const { length, angle } = params;\n      const p1 = polarToCartesian(0, 0, radius, angle + 90);\n      const p2 = polarToCartesian(0, 0, radius + length, angle + 90);\n\n      return {\n        key: `tick-${angle}`,\n        x1: p1.x,\n        x2: p2.x,\n        y1: p1.y,\n        y2: p2.y,\n      };\n    },\n    [ticks, diameter, radius]\n  );\n\n  const angleToValue = (angle: number) => {\n    const angleRange = endAngle - startAngle;\n    const valueRange = maxValue - minValue;\n    const value = minValue + ((angle - startAngle) / angleRange) * valueRange;\n    return Math.round(value);\n  };\n\n  const valueToAngle = (value: number) => {\n    const angleRange = endAngle - startAngle;\n    const valueRange = maxValue - minValue;\n    const angle = startAngle + ((value - minValue) / valueRange) * angleRange;\n    return Math.round(angle);\n  };\n\n  const getArcProps = useCallback(\n    (params: GetArcPropsParams) => {\n      const { offset = 0, startAngle, endAngle, ...rest } = params;\n\n      let start = polarToCartesian(0, 0, radius + offset, startAngle + 90);\n      let end = polarToCartesian(0, 0, radius + offset, endAngle + 90);\n\n      let largeArcFlag = endAngle - startAngle < 180 ? '0' : '1';\n\n      let d = [\n        'M',\n        start.x - 0.001,\n        start.y,\n        'A',\n        radius + offset,\n        radius + offset,\n        0,\n        largeArcFlag,\n        1,\n        end.x,\n        end.y,\n      ].join(' ');\n\n      return {\n        d,\n        ...rest,\n      };\n    },\n    [diameter, radius]\n  );\n\n  const getNeedleProps = useCallback(\n    (params: GetNeedleParams) => {\n      const { value, baseRadius, tipRadius } = params;\n      const angle = valueToAngle(value);\n\n      const baseCircleCenter = {\n        x: 0,\n        y: 0,\n      };\n\n      const tipCircleCenter = polarToCartesian(0, 0, radius, angle + 90);\n\n      return {\n        base: {\n          r: baseRadius,\n          cx: baseCircleCenter.x,\n          cy: baseCircleCenter.y,\n        },\n        tip: {\n          r: tipRadius,\n          cx: tipCircleCenter.x,\n          cy: tipCircleCenter.y,\n        },\n        points: [\n          [\n            baseCircleCenter.x + baseRadius * Math.cos(degreesToRadians(angle)),\n            baseCircleCenter.y + baseRadius * Math.sin(degreesToRadians(angle)),\n          ],\n          [\n            tipCircleCenter.x + tipRadius * Math.cos(degreesToRadians(angle)),\n            tipCircleCenter.y + tipRadius * Math.sin(degreesToRadians(angle)),\n          ],\n          [\n            tipCircleCenter.x +\n              tipRadius * Math.cos(degreesToRadians(angle - 180)),\n            tipCircleCenter.y +\n              tipRadius * Math.sin(degreesToRadians(angle - 180)),\n          ],\n          [\n            baseCircleCenter.x +\n              baseRadius * Math.cos(degreesToRadians(angle - 180)),\n            baseCircleCenter.y +\n              baseRadius * Math.sin(degreesToRadians(angle - 180)),\n          ],\n        ]\n          .map(([x, y]) => `${x},${y}`)\n          .join(' '),\n      };\n    },\n    [valueToAngle, diameter, radius]\n  );\n\n  const calculatediameterForDirection = useCallback(\n    (startAngle: number, deg: number) => {\n      const angle = startAngle - deg;\n      const distance = (Math.cos(degreesToRadians(angle)) * diameter) / 2;\n      return distance;\n    },\n    [diameter]\n  );\n\n  const getSVGProps = () => {\n    const getDistanceForDirection = (deg: number) => {\n      if (startAngle < deg && endAngle > deg) return diameter / 2;\n      const startAngleDistance = calculatediameterForDirection(\n        startAngle + 90,\n        deg + 90\n      );\n      const endAngleDistance = calculatediameterForDirection(\n        endAngle + 90,\n        deg + 90\n      );\n      return Math.max(0, startAngleDistance, endAngleDistance);\n    };\n\n    const [top, right, bottom, left] = [\n      getDistanceForDirection(180),\n      getDistanceForDirection(270),\n      getDistanceForDirection(0),\n      getDistanceForDirection(90),\n    ];\n\n    const width = left + right;\n    const height = top + bottom;\n\n    const viewBox = [-left, -top, width, height].join(' ');\n\n    return {\n      width,\n      height,\n      viewBox,\n    };\n  };\n\n  return {\n    ticks,\n    getTickProps,\n    getLabelProps,\n    valueToAngle,\n    angleToValue,\n    getArcProps,\n    getNeedleProps,\n    getSVGProps,\n  };\n}\n"],"names":["degreesToRadians","degrees","Math","PI","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","x","cos","y","sin","params","startAngle","endAngle","numTicks","diameter","domain","minValue","maxValue","ticks","useMemo","minAngle","maxAngle","tickMarks","angleStep","i","push","floor","reverse","makeTickMarks","getLabelProps","useCallback","p1","offset","angle","dominantBaseline","textAnchor","getTickProps","length","p2","key","x1","x2","y1","y2","valueToAngle","value","round","getArcProps","rest","start","end","d","join","getNeedleProps","baseRadius","tipRadius","tipCircleCenter","base","r","cx","cy","tip","points","map","calculatediameterForDirection","deg","angleToValue","getSVGProps","getDistanceForDirection","startAngleDistance","endAngleDistance","max","top","left","width","height","viewBox"],"mappings":"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"}