{"ast":null,"code":"// import React, {useRef} from 'react';\n// import {Animated, Platform, StyleSheet, View} from 'react-native';\n// import * as Progress from 'react-native-progress';\n// import MaskedView from '@react-native-masked-view/masked-view';\n// import {withAnchorPoint} from 'react-native-anchor-point';\n// import useDidMountEffect from '../helper/useDidMountEffect';\n// import {LinearGradient} from 'expo-linear-gradient';\n// const CIRCLE = Math.PI * 2;\n// const Gauge = (props) => {\n//   const style = StyleSheet.compose(styles.arc, props.style);\n//   const {\n//     size,\n//     progress,\n//     animated,\n//     overallGradient,\n//     addTriangleTip,\n//     triangleTipWidth,\n//     triangleTipHeight,\n//     triangleNeedle,\n//     addCircle,\n//     circleSize,\n//     addTriangleBase,\n//     triangleBaseWidth,\n//     triangleBaseHeight,\n//     translateBaseShapeY,\n//     alwaysUseEndAngle,\n//     endAngle,\n//     unfilledEndAngle,\n//     rotate,\n//     thickness,\n//     borderWidth,\n//     needleWidth,\n//     needleHeight,\n//     needleBorderRadius,\n//     translateNeedleY,\n//     color,\n//     borderColor,\n//     needleColor,\n//     unfilledColor,\n//     circleColor,\n//     triangleTipColor,\n//     triangleBaseColor,\n//     gradientStyle,\n//   } = props;\n//   const prevCountRef = useRef();\n//   useDidMountEffect(() => {\n//     if (animated) {\n//       prevCountRef.current = progress * CIRCLE * unfilledEndAngle;\n//       moveNeedleFn();\n//     }\n//   }, [progress, unfilledEndAngle]);\n//   const moveNeedle = useRef(\n//     new Animated.Value(progress * CIRCLE * unfilledEndAngle),\n//   ).current;\n//   const moveNeedleFn = () => {\n//     Animated.spring(moveNeedle, {\n//       toValue: progress * CIRCLE * unfilledEndAngle,\n//       bounciness: 0,\n//       useNativeDriver: true,\n//     }).start();\n//   };\n//   return (\n//     <View>\n//       {overallGradient ? (\n//         <View\n//           style={{\n//             ...styles.maskContainer,\n//             height: size,\n//             width: size,\n//           }}>\n//           <MaskedView\n//             maskElement={\n//               <Progress.Circle\n//                 size={size}\n//                 progress={progress}\n//                 alwaysUseEndAngle={alwaysUseEndAngle}\n//                 endAngle={endAngle}\n//                 unfilledEndAngle={unfilledEndAngle}\n//                 thickness={thickness}\n//                 borderWidth={borderWidth}\n//                 color={color}\n//                 borderColor={borderColor}\n//                 unfilledColor={unfilledColor}\n//                 indeterminate={false}\n//                 style={{...style, transform: [{rotate: rotate}]}}>\n//                 <Animated.View\n//                   style={[\n//                     {\n//                       position: 'absolute',\n//                       width: triangleNeedle ? 0 : needleWidth,\n//                       height: triangleNeedle ? 0 : needleHeight,\n//                       top: size / 2 - needleHeight - translateNeedleY / 2,\n//                       borderTopWidth: 0,\n//                       borderLeftWidth: triangleNeedle ? needleWidth : 0,\n//                       borderRightWidth: triangleNeedle ? needleWidth : 0,\n//                       borderBottomWidth: triangleNeedle ? needleHeight : 0,\n//                       backgroundColor: triangleNeedle\n//                         ? 'transparent'\n//                         : needleColor,\n//                       borderRadius: triangleNeedle ? 0 : needleBorderRadius,\n//                       borderStyle: 'solid',\n//                       borderLeftColor: 'transparent',\n//                       borderRightColor: 'transparent',\n//                       borderBottomColor: needleColor,\n//                     },\n//                     withAnchorPoint(\n//                       {\n//                         transform: [\n//                           {rotateZ: moveNeedle},\n//                           {translateY: -translateNeedleY},\n//                         ],\n//                       },\n//                       {x: 0.5, y: 1},\n//                       {\n//                         width: needleWidth,\n//                         height: needleHeight + translateNeedleY,\n//                       },\n//                     ),\n//                   ]}>\n//                   {addTriangleTip && (\n//                     <View\n//                       style={{\n//                         alignSelf: 'center',\n//                         top: -triangleTipHeight,\n//                         borderTopWidth: 0,\n//                         borderStyle: 'solid',\n//                         borderLeftColor: 'transparent',\n//                         borderRightColor: 'transparent',\n//                         borderBottomColor: triangleTipColor,\n//                         borderLeftWidth: triangleTipWidth,\n//                         borderRightWidth: triangleTipWidth,\n//                         borderBottomWidth: triangleTipHeight,\n//                       }}\n//                     />\n//                   )}\n//                   {addTriangleBase && (\n//                     <Animated.View\n//                       style={{\n//                         position: 'absolute',\n//                         alignSelf: 'center',\n//                         top:\n//                           triangleBaseHeight +\n//                           needleHeight / 2 -\n//                           1 -\n//                           translateBaseShapeY,\n//                         borderTopWidth: 0,\n//                         borderStyle: 'solid',\n//                         borderLeftColor: 'transparent',\n//                         borderRightColor: 'transparent',\n//                         borderBottomColor: triangleBaseColor,\n//                         borderLeftWidth: triangleBaseWidth,\n//                         borderRightWidth: triangleBaseWidth,\n//                         borderBottomWidth: triangleBaseHeight,\n//                       }}\n//                     />\n//                   )}\n//                 </Animated.View>\n//                 {addCircle && (\n//                   <Animated.View\n//                     style={{\n//                       position: 'absolute',\n//                       height: circleSize,\n//                       width: circleSize,\n//                       borderRadius: circleSize / 2,\n//                       backgroundColor: circleColor,\n//                       transform: [{rotateZ: moveNeedle}],\n//                     }}\n//                   />\n//                 )}\n//               </Progress.Circle>\n//             }>\n//             <LinearGradient\n//               colors={overallGradient}\n//               style={{\n//                 ...gradientStyle,\n//                 height: size,\n//                 width: size,\n//               }}\n//             />\n//           </MaskedView>\n//         </View>\n//       ) : (\n//         <Progress.Circle\n//           size={size}\n//           progress={progress}\n//           alwaysUseEndAngle={alwaysUseEndAngle}\n//           endAngle={endAngle}\n//           unfilledEndAngle={unfilledEndAngle}\n//           thickness={thickness}\n//           borderWidth={borderWidth}\n//           color={color}\n//           borderColor={borderColor}\n//           unfilledColor={unfilledColor}\n//           indeterminate={false}\n//           style={{...style, transform: [{rotate: rotate}]}}>\n//           <Animated.View\n//             style={[\n//               {\n//                 position: 'absolute',\n//                 width: triangleNeedle ? 0 : needleWidth,\n//                 height: triangleNeedle ? 0 : needleHeight,\n//                 top: size / 2 - needleHeight - translateNeedleY / 2,\n//                 borderTopWidth: 0,\n//                 borderLeftWidth: triangleNeedle ? needleWidth : 0,\n//                 borderRightWidth: triangleNeedle ? needleWidth : 0,\n//                 borderBottomWidth: triangleNeedle ? needleHeight : 0,\n//                 backgroundColor: triangleNeedle ? 'transparent' : needleColor,\n//                 borderRadius: triangleNeedle ? 0 : needleBorderRadius,\n//                 borderStyle: 'solid',\n//                 borderLeftColor: 'transparent',\n//                 borderRightColor: 'transparent',\n//                 borderBottomColor: needleColor,\n//               },\n//               withAnchorPoint(\n//                 {\n//                   transform: [\n//                     {rotateZ: moveNeedle},\n//                     {translateY: -translateNeedleY},\n//                   ],\n//                 },\n//                 {x: 0.5, y: 1},\n//                 {\n//                   width: needleWidth,\n//                   height: needleHeight + translateNeedleY,\n//                 },\n//               ),\n//             ]}>\n//             {addTriangleTip && (\n//               <View\n//                 style={{\n//                   alignSelf: 'center',\n//                   top: -triangleTipHeight,\n//                   borderTopWidth: 0,\n//                   borderStyle: 'solid',\n//                   borderLeftColor: 'transparent',\n//                   borderRightColor: 'transparent',\n//                   borderBottomColor: triangleTipColor,\n//                   borderLeftWidth: triangleTipWidth,\n//                   borderRightWidth: triangleTipWidth,\n//                   borderBottomWidth: triangleTipHeight,\n//                 }}\n//               />\n//             )}\n//           </Animated.View>\n//           {addCircle && (\n//             <Animated.View\n//               style={{\n//                 position: 'absolute',\n//                 height: circleSize,\n//                 width: circleSize,\n//                 borderRadius: circleSize / 2,\n//                 backgroundColor: circleColor,\n//                 transform: [{rotateZ: moveNeedle}],\n//               }}\n//             />\n//           )}\n//         </Progress.Circle>\n//       )}\n//     </View>\n//   );\n// };\n// Gauge.defaultProps = {\n//   size: 30,\n//   progress: 0.5,\n//   overallGradient: false,\n//   addTriangleTip: false,\n//   triangleTipWidth: 2,\n//   triangleTipHeight: 4,\n//   triangleNeedle: false,\n//   addCircle: false,\n//   circleSize: 15,\n//   addTriangleBase: false,\n//   triangleBaseWidth: 5,\n//   triangleBaseHeight: 20,\n//   translateBaseShapeY: 0,\n//   animated: true,\n//   alwaysUseEndAngle: true,\n//   endAngle: 0.9,\n//   unfilledEndAngle: 0.9,\n//   rotate: '-90deg',\n//   thickness: 6,\n//   borderWidth: 1,\n//   needleWidth: 2,\n//   needleHeight: 45,\n//   needleBorderRadius: 0,\n//   translateNeedleY: 0,\n//   color: 'blue',\n//   borderColor: 'blue',\n//   needleColor: 'blue',\n//   unfilledColor: 'grey',\n//   circleColor: 'blue',\n//   triangleTipColor: 'blue',\n//   triangleBaseColor: 'blue',\n//   gradientStyle: {},\n// };\n// let styles;\n// if (Platform.OS === 'ios') {\n//   styles = StyleSheet.create({\n//     arc: {\n//       alignItems: 'center',\n//       justifyContent: 'center',\n//     },\n//     maskContainer: {\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//     },\n//   });\n// } else {\n//   styles = StyleSheet.create({\n//     arc: {\n//       alignItems: 'center',\n//       justifyContent: 'center',\n//     },\n//     maskContainer: {\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//     },\n//   });\n// }\n// export default Gauge;","map":{"version":3,"sources":["/Users/jasonyellow/Desktop/project/WN_APP/wn_app/src/component/meter.js"],"names":[],"mappingssourcesContent":["// import React, {useRef} from 'react';\n// import {Animated, Platform, StyleSheet, View} from 'react-native';\n// import * as Progress from 'react-native-progress';\n// import MaskedView from '@react-native-masked-view/masked-view';\n// import {withAnchorPoint} from 'react-native-anchor-point';\n// import useDidMountEffect from '../helper/useDidMountEffect';\n// import {LinearGradient} from 'expo-linear-gradient';\n\n// const CIRCLE = Math.PI * 2;\n\n// const Gauge = (props) => {\n//   const style = StyleSheet.compose(styles.arc, props.style);\n\n//   const {\n//     size,\n//     progress,\n//     animated,\n//     overallGradient,\n//     addTriangleTip,\n//     triangleTipWidth,\n//     triangleTipHeight,\n//     triangleNeedle,\n//     addCircle,\n//     circleSize,\n//     addTriangleBase,\n//     triangleBaseWidth,\n//     triangleBaseHeight,\n//     translateBaseShapeY,\n//     alwaysUseEndAngle,\n//     endAngle,\n//     unfilledEndAngle,\n//     rotate,\n//     thickness,\n//     borderWidth,\n//     needleWidth,\n//     needleHeight,\n//     needleBorderRadius,\n//     translateNeedleY,\n//     color,\n//     borderColor,\n//     needleColor,\n//     unfilledColor,\n//     circleColor,\n//     triangleTipColor,\n//     triangleBaseColor,\n//     gradientStyle,\n//   } = props;\n\n//   const prevCountRef = useRef();\n//   useDidMountEffect(() => {\n//     if (animated) {\n//       prevCountRef.current = progress * CIRCLE * unfilledEndAngle;\n//       moveNeedleFn();\n//     }\n//   }, [progress, unfilledEndAngle]);\n\n//   const moveNeedle = useRef(\n//     new Animated.Value(progress * CIRCLE * unfilledEndAngle),\n//   ).current;\n\n//   const moveNeedleFn = () => {\n//     Animated.spring(moveNeedle, {\n//       toValue: progress * CIRCLE * unfilledEndAngle,\n//       bounciness: 0,\n//       useNativeDriver: true,\n//     }).start();\n//   };\n\n//   return (\n//     <View>\n//       {overallGradient ? (\n//         <View\n//           style={{\n//             ...styles.maskContainer,\n//             height: size,\n//             width: size,\n//           }}>\n//           <MaskedView\n//             maskElement={\n//               <Progress.Circle\n//                 size={size}\n//                 progress={progress}\n//                 alwaysUseEndAngle={alwaysUseEndAngle}\n//                 endAngle={endAngle}\n//                 unfilledEndAngle={unfilledEndAngle}\n//                 thickness={thickness}\n//                 borderWidth={borderWidth}\n//                 color={color}\n//                 borderColor={borderColor}\n//                 unfilledColor={unfilledColor}\n//                 indeterminate={false}\n//                 style={{...style, transform: [{rotate: rotate}]}}>\n//                 <Animated.View\n//                   style={[\n//                     {\n//                       position: 'absolute',\n//                       width: triangleNeedle ? 0 : needleWidth,\n//                       height: triangleNeedle ? 0 : needleHeight,\n//                       top: size / 2 - needleHeight - translateNeedleY / 2,\n//                       borderTopWidth: 0,\n//                       borderLeftWidth: triangleNeedle ? needleWidth : 0,\n//                       borderRightWidth: triangleNeedle ? needleWidth : 0,\n//                       borderBottomWidth: triangleNeedle ? needleHeight : 0,\n//                       backgroundColor: triangleNeedle\n//                         ? 'transparent'\n//                         : needleColor,\n//                       borderRadius: triangleNeedle ? 0 : needleBorderRadius,\n//                       borderStyle: 'solid',\n//                       borderLeftColor: 'transparent',\n//                       borderRightColor: 'transparent',\n//                       borderBottomColor: needleColor,\n//                     },\n//                     withAnchorPoint(\n//                       {\n//                         transform: [\n//                           {rotateZ: moveNeedle},\n//                           {translateY: -translateNeedleY},\n//                         ],\n//                       },\n//                       {x: 0.5, y: 1},\n//                       {\n//                         width: needleWidth,\n//                         height: needleHeight + translateNeedleY,\n//                       },\n//                     ),\n//                   ]}>\n//                   {addTriangleTip && (\n//                     <View\n//                       style={{\n//                         alignSelf: 'center',\n//                         top: -triangleTipHeight,\n//                         borderTopWidth: 0,\n//                         borderStyle: 'solid',\n//                         borderLeftColor: 'transparent',\n//                         borderRightColor: 'transparent',\n//                         borderBottomColor: triangleTipColor,\n//                         borderLeftWidth: triangleTipWidth,\n//                         borderRightWidth: triangleTipWidth,\n//                         borderBottomWidth: triangleTipHeight,\n//                       }}\n//                     />\n//                   )}\n//                   {addTriangleBase && (\n//                     <Animated.View\n//                       style={{\n//                         position: 'absolute',\n//                         alignSelf: 'center',\n//                         top:\n//                           triangleBaseHeight +\n//                           needleHeight / 2 -\n//                           1 -\n//                           translateBaseShapeY,\n//                         borderTopWidth: 0,\n//                         borderStyle: 'solid',\n//                         borderLeftColor: 'transparent',\n//                         borderRightColor: 'transparent',\n//                         borderBottomColor: triangleBaseColor,\n//                         borderLeftWidth: triangleBaseWidth,\n//                         borderRightWidth: triangleBaseWidth,\n//                         borderBottomWidth: triangleBaseHeight,\n//                       }}\n//                     />\n//                   )}\n//                 </Animated.View>\n//                 {addCircle && (\n//                   <Animated.View\n//                     style={{\n//                       position: 'absolute',\n//                       height: circleSize,\n//                       width: circleSize,\n//                       borderRadius: circleSize / 2,\n//                       backgroundColor: circleColor,\n//                       transform: [{rotateZ: moveNeedle}],\n//                     }}\n//                   />\n//                 )}\n//               </Progress.Circle>\n//             }>\n//             <LinearGradient\n//               colors={overallGradient}\n//               style={{\n//                 ...gradientStyle,\n//                 height: size,\n//                 width: size,\n//               }}\n//             />\n//           </MaskedView>\n//         </View>\n//       ) : (\n//         <Progress.Circle\n//           size={size}\n//           progress={progress}\n//           alwaysUseEndAngle={alwaysUseEndAngle}\n//           endAngle={endAngle}\n//           unfilledEndAngle={unfilledEndAngle}\n//           thickness={thickness}\n//           borderWidth={borderWidth}\n//           color={color}\n//           borderColor={borderColor}\n//           unfilledColor={unfilledColor}\n//           indeterminate={false}\n//           style={{...style, transform: [{rotate: rotate}]}}>\n//           <Animated.View\n//             style={[\n//               {\n//                 position: 'absolute',\n//                 width: triangleNeedle ? 0 : needleWidth,\n//                 height: triangleNeedle ? 0 : needleHeight,\n//                 top: size / 2 - needleHeight - translateNeedleY / 2,\n//                 borderTopWidth: 0,\n//                 borderLeftWidth: triangleNeedle ? needleWidth : 0,\n//                 borderRightWidth: triangleNeedle ? needleWidth : 0,\n//                 borderBottomWidth: triangleNeedle ? needleHeight : 0,\n//                 backgroundColor: triangleNeedle ? 'transparent' : needleColor,\n//                 borderRadius: triangleNeedle ? 0 : needleBorderRadius,\n//                 borderStyle: 'solid',\n//                 borderLeftColor: 'transparent',\n//                 borderRightColor: 'transparent',\n//                 borderBottomColor: needleColor,\n//               },\n//               withAnchorPoint(\n//                 {\n//                   transform: [\n//                     {rotateZ: moveNeedle},\n//                     {translateY: -translateNeedleY},\n//                   ],\n//                 },\n//                 {x: 0.5, y: 1},\n//                 {\n//                   width: needleWidth,\n//                   height: needleHeight + translateNeedleY,\n//                 },\n//               ),\n//             ]}>\n//             {addTriangleTip && (\n//               <View\n//                 style={{\n//                   alignSelf: 'center',\n//                   top: -triangleTipHeight,\n//                   borderTopWidth: 0,\n//                   borderStyle: 'solid',\n//                   borderLeftColor: 'transparent',\n//                   borderRightColor: 'transparent',\n//                   borderBottomColor: triangleTipColor,\n//                   borderLeftWidth: triangleTipWidth,\n//                   borderRightWidth: triangleTipWidth,\n//                   borderBottomWidth: triangleTipHeight,\n//                 }}\n//               />\n//             )}\n//           </Animated.View>\n//           {addCircle && (\n//             <Animated.View\n//               style={{\n//                 position: 'absolute',\n//                 height: circleSize,\n//                 width: circleSize,\n//                 borderRadius: circleSize / 2,\n//                 backgroundColor: circleColor,\n//                 transform: [{rotateZ: moveNeedle}],\n//               }}\n//             />\n//           )}\n//         </Progress.Circle>\n//       )}\n//     </View>\n//   );\n// };\n\n// Gauge.defaultProps = {\n//   size: 30,\n//   progress: 0.5,\n//   overallGradient: false,\n//   addTriangleTip: false,\n//   triangleTipWidth: 2,\n//   triangleTipHeight: 4,\n//   triangleNeedle: false,\n//   addCircle: false,\n//   circleSize: 15,\n//   addTriangleBase: false,\n//   triangleBaseWidth: 5,\n//   triangleBaseHeight: 20,\n//   translateBaseShapeY: 0,\n//   animated: true,\n//   alwaysUseEndAngle: true,\n//   endAngle: 0.9,\n//   unfilledEndAngle: 0.9,\n//   rotate: '-90deg',\n//   thickness: 6,\n//   borderWidth: 1,\n//   needleWidth: 2,\n//   needleHeight: 45,\n//   needleBorderRadius: 0,\n//   translateNeedleY: 0,\n//   color: 'blue',\n//   borderColor: 'blue',\n//   needleColor: 'blue',\n//   unfilledColor: 'grey',\n//   circleColor: 'blue',\n//   triangleTipColor: 'blue',\n//   triangleBaseColor: 'blue',\n//   gradientStyle: {},\n// };\n\n// let styles;\n// if (Platform.OS === 'ios') {\n//   styles = StyleSheet.create({\n//     arc: {\n//       alignItems: 'center',\n//       justifyContent: 'center',\n//     },\n//     maskContainer: {\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//     },\n//   });\n// } else {\n//   styles = StyleSheet.create({\n//     arc: {\n//       alignItems: 'center',\n//       justifyContent: 'center',\n//     },\n//     maskContainer: {\n//       justifyContent: 'center',\n//       alignItems: 'center',\n//     },\n//   });\n// }\n\n// export default Gauge;"]},"metadata":{},"sourceType":"module"}