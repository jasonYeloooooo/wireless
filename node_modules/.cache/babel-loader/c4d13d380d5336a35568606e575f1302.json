{"ast":null,"code":"import * as React from 'react';\nimport { View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\nexport default function NativeLinearGradient(_ref) {\n  let {\n    colors,\n    locations,\n    startPoint,\n    endPoint,\n    ...props\n  } = _ref;\n  const [layout, setLayout] = React.useState(null);\n  const {\n    width = 1,\n    height = 1\n  } = layout ?? {};\n  const pseudoAngle = React.useMemo(() => {\n    const getControlPoints = () => {\n      let correctedStartPoint = [0, 0];\n\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n      }\n\n      let correctedEndPoint = [0.0, 1.0];\n\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n      }\n\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n    return 90 + Math.atan2(py, px) * 180 / Math.PI;\n  }, [width, height, startPoint, endPoint]);\n  const gradientColors = React.useMemo(() => {\n    return colors.map((color, index) => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index])); // Convert 0...1 to 0...100\n\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n\n      return output;\n    });\n  }, [colors, locations]);\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`; // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n\n  return React.createElement(View, { ...props,\n    style: [props.style, // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n    {\n      backgroundImage\n    }],\n    onLayout: event => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = event.nativeEvent.layout;\n      const oldLayout = layout ?? {\n        x: 0,\n        y: 0,\n        width: 1,\n        height: 1\n      }; // don't set new layout state unless the layout has actually changed\n\n      if (x !== oldLayout.x || y !== oldLayout.y || width !== oldLayout.width || height !== oldLayout.height) {\n        setLayout({\n          x,\n          y,\n          width,\n          height\n        });\n      }\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["React","View","normalizeColor","NativeLinearGradient","colors","locations","startPoint","endPoint","props","layout","setLayout","useState","width","height","pseudoAngle","useMemo","getControlPoints","correctedStartPoint","Array","isArray","correctedEndPoint","start","end","py","px","Math","atan2","PI","gradientColors","map","color","index","hexColor","output","location","max","min","percentage","colorStyle","join","backgroundImage","style","onLayout","event","x","y","nativeEvent","oldLayout"],"sources":["/Users/jasonyellow/Desktop/project/WN_APP/wn_app/node_modules/expo-linear-gradient/src/NativeLinearGradient.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [layout, setLayout] = React.useState<LayoutRectangle | null>(null);\n\n  const { width = 1, height = 1 } = layout ?? {};\n\n  const pseudoAngle = React.useMemo(() => {\n    const getControlPoints = (): NativeLinearGradientPoint[] => {\n      let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    return 90 + (Math.atan2(py, px) * 180) / Math.PI;\n  }, [width, height, startPoint, endPoint]);\n\n  const gradientColors = React.useMemo(() => {\n    return colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={(event) => {\n        const { x, y, width, height } = event.nativeEvent.layout;\n        const oldLayout = layout ?? { x: 0, y: 0, width: 1, height: 1 };\n        // don't set new layout state unless the layout has actually changed\n        if (\n          x !== oldLayout.x ||\n          y !== oldLayout.y ||\n          width !== oldLayout.width ||\n          height !== oldLayout.height\n        ) {\n          setLayout({ x, y, width, height });\n        }\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}