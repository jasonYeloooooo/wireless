{"ast":null,"code":"import * as React from 'react';\nimport { Platform, processColor } from 'react-native';\nimport NativeLinearGradient from './NativeLinearGradient';\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\n\nexport class LinearGradient extends React.Component {\n  render() {\n    const {\n      colors,\n      locations,\n      start,\n      end,\n      ...props\n    } = this.props;\n    let resolvedLocations = locations;\n\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return React.createElement(NativeLinearGradient, { ...props,\n      colors: Platform.select({\n        web: colors,\n        default: colors.map(processColor)\n      }),\n      locations: resolvedLocations,\n      startPoint: _normalizePoint(start),\n      endPoint: _normalizePoint(end)\n    });\n  }\n\n}\n\nfunction _normalizePoint(point) {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAkD,cAAlD;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;AA2DA;;;;AAGA,OAAM,MAAOC,cAAP,SAA8BJ,KAAK,CAACK,SAApC,CAAkE;AACtEC,QAAM;AACJ,UAAM;AAAEC,YAAF;AAAUC,eAAV;AAAqBC,WAArB;AAA4BC,SAA5B;AAAiC,SAAGC;AAApC,QAA8C,KAAKA,KAAzD;AACA,QAAIC,iBAAiB,GAAGJ,SAAxB;;AACA,QAAIA,SAAS,IAAID,MAAM,CAACM,MAAP,KAAkBL,SAAS,CAACK,MAA7C,EAAqD;AACnDC,aAAO,CAACC,IAAR,CAAa,+EAAb;AACAH,uBAAiB,GAAGJ,SAAS,CAACQ,KAAV,CAAgB,CAAhB,EAAmBT,MAAM,CAACM,MAA1B,CAApB;AACD;;AAED,WACEb,oBAACG,oBAAD,EAAqB,KACfQ,KADe;AAEnBJ,YAAM,EAAEN,QAAQ,CAACgB,MAAT,CAAgB;AACtBC,WAAG,EAAEX,MADiB;AAEtBY,eAAO,EAAEZ,MAAM,CAACa,GAAP,CAAWlB,YAAX;AAFa,OAAhB,CAFW;AAMnBM,eAAS,EAAEI,iBANQ;AAOnBS,gBAAU,EAAEC,eAAe,CAACb,KAAD,CAPR;AAQnBc,cAAQ,EAAED,eAAe,CAACZ,GAAD;AARN,KAArB,CADF;AAYD;;AArBqE;;AAwBxE,SAASY,eAAT,CACEE,KADF,EAC+C;AAE7C,MAAI,CAACA,KAAL,EAAY;AACV,WAAOC,SAAP;AACD;;AAED,MAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,KAAwBA,KAAK,CAACX,MAAN,KAAiB,CAA7C,EAAgD;AAC9CC,WAAO,CAACC,IAAR,CAAa,8EAAb;AACA,WAAOU,SAAP;AACD;;AAED,SAAOC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAK,CAACI,CAAP,EAAUJ,KAAK,CAACK,CAAhB,CAAtC;AACD","names":["React","Platform","processColor","NativeLinearGradient","LinearGradient","Component","render","colors","locations","start","end","props","resolvedLocations","length","console","warn","slice","select","web","default","map","startPoint","_normalizePoint","endPoint","point","undefined","Array","isArray","x","y"],"sources":["/Users/jasonyellow/Desktop/project/WN_APP/wn_app/node_modules/expo-linear-gradient/src/LinearGradient.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, processColor, ViewProps } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\n// @needsAudit\n/**\n * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n * at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging\n * from `0` to `1`, inclusive.\n */\nexport type LinearGradientPoint =\n  | {\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      x: number;\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      y: number;\n    }\n  | NativeLinearGradientPoint;\n\n// @needsAudit\nexport type LinearGradientProps = ViewProps & {\n  /**\n   * An array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   */\n  colors: string[];\n  /**\n   * An array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   * If not specified, the colors will be distributed evenly across the gradient.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * > The color-stop locations must be ascending from least to greatest.\n   * @default []\n   */\n  locations?: number[] | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   * @default { x: 0.5, y: 0.0 }\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   * @default { x: 0.5, y: 1.0 }\n   */\n  end?: LinearGradientPoint | null;\n};\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport class LinearGradient extends React.Component<LinearGradientProps> {\n  render() {\n    const { colors, locations, start, end, ...props } = this.props;\n    let resolvedLocations = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return (\n      <NativeLinearGradient\n        {...props}\n        colors={Platform.select({\n          web: colors as any,\n          default: colors.map(processColor),\n        })}\n        locations={resolvedLocations}\n        startPoint={_normalizePoint(start)}\n        endPoint={_normalizePoint(end)}\n      />\n    );\n  }\n}\n\nfunction _normalizePoint(\n  point: LinearGradientPoint | null | undefined\n): NativeLinearGradientPoint | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n"]},"metadata":{},"sourceType":"module"}