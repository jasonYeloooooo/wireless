{"ast":null,"code":"var _jsxFileName = \"/Users/jasonyellow/Desktop/project/WN_APP/wn_app/src/component/Gauge.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TICK_ID = 'tick';\nexport default class Gauge extends Component {\n  constructor() {\n    super(...arguments);\n    this.defaultProps = {\n      size: 200,\n      dialWidth: 10,\n      dialColor: '#eee',\n      tickLength: 3,\n      tickWidth: 1,\n      tickColor: '#cacaca',\n      tickInterval: 10,\n      maximumValue: 150,\n      currentValue: 0,\n      progressWidth: 5,\n      progressColor: '#3d3d3d',\n      progressRoundedEdge: true,\n      downProgressColor: 'red',\n      progressFont: 'Serif',\n      progressFontSize: '40',\n      needle: true,\n      needleBaseSize: 5,\n      needleBaseColor: '#9d9d9d',\n      needleWidth: 2,\n      needleSharp: false,\n      needleColor: '#8a8a8a'\n    };\n\n    this.renderDial = opts => {\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: opts.cX,\n        cy: opts.cY,\n        r: opts.radius,\n        fill: \"none\",\n        stroke: opts.dialColor,\n        strokeWidth: opts.dialWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.defineTick = opts => {\n      let tX1 = opts.cX + opts.radius - Math.max(opts.dialWidth, opts.progressWidth) / 2;\n      let tX2 = tX1 - opts.tickLength;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        id: TICK_ID,\n        x1: tX1,\n        y1: opts.cY,\n        x2: tX2,\n        y2: opts.cY,\n        stroke: opts.tickColor,\n        strokeWidth: opts.tickWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this);\n    };\n\n    this.renderTicks = opts => {\n      let tickAngles = [];\n\n      for (let i = 0; i <= 360; i += opts.tickInterval) {\n        tickAngles.push(i);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"ticks\",\n        children: tickAngles.map((tickAngle, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"use\", {\n            href: `#${TICK_ID}`,\n            transform: `rotate(${tickAngle} ${opts.cX} ${opts.cY})`\n          }, `tick-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderProgress = opts => {\n      let offset = opts.circumference * (1 - opts.currentValue / 100);\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: opts.cX,\n        cy: opts.cY,\n        r: opts.radius,\n        fill: \"none\",\n        stroke: opts.progressColor,\n        strokeWidth: opts.progressWidth,\n        strokeDasharray: opts.circumference,\n        strokeDashoffset: offset,\n        strokeLinecap: opts.progressRoundedEdge ? 'round' : 'butt'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderNeedle = opts => {\n      let x1 = opts.cX,\n          y1 = opts.cY - opts.needleWidth / 2,\n          x2 = opts.cX,\n          y2 = opts.cY + opts.needleWidth / 2,\n          x3 = opts.diameter,\n          y3 = opts.cY,\n          needleAngle = 360 * opts.currentValue / 100;\n      let needleElm = null;\n\n      if (opts.needleSharp) {\n        needleElm = /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${x1},${y1} ${x2},${y2} ${x3},${y3}`,\n          fill: opts.needleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }, this);\n      } else {\n        needleElm = /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: opts.cX,\n          y1: opts.cY,\n          x2: opts.diameter,\n          y2: opts.cY,\n          fill: \"none\",\n          strokeWidth: opts.needleWidth,\n          stroke: opts.needleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"needle\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(${needleAngle} ${opts.cX} ${opts.cY})`,\n          children: needleElm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: opts.cX,\n          cy: opts.cY,\n          r: opts.needleBaseSize,\n          fill: opts.needleBaseColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderText = opts => {\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: opts.cX,\n        y: opts.cY + 55,\n        fontFamily: opts.progressFont,\n        fontSize: opts.progressFontSize,\n        transform: `rotate(90 ${opts.cX} ${opts.cY})`,\n        textAnchor: \"middle\",\n        fill: opts.progressColor,\n        children: opts.currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    let opts = Object.assign({}, this.props);\n    let {\n      size,\n      dialWidth\n    } = opts;\n    let cX = size / 2;\n    let cY = size / 2;\n    let radius = (size - 2 * dialWidth) / 2;\n    let diameter = 2 * radius;\n    let circumference = 2 * Math.PI * radius;\n    opts = Object.assign(opts, {\n      cX,\n      cY,\n      radius,\n      diameter,\n      circumference\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: opts.className,\n        height: size,\n        width: size,\n        viewBox: `0 0 ${size} ${size}`,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: this.defineTick(opts)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(-90 ${cX} ${cY})`,\n          children: [this.renderDial(opts), this.renderTicks(opts), this.renderProgress(opts), this.renderNeedle(opts), this.renderText(opts)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: opts.currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jasonyellow/Desktop/project/WN_APP/wn_app/src/component/Gauge.js"],"names":["React","Component","TICK_ID","Gauge","defaultProps","size","dialWidth","dialColor","tickLength","tickWidth","tickColor","tickInterval","maximumValue","currentValue","progressWidth","progressColor","progressRoundedEdge","downProgressColor","progressFont","progressFontSize","needle","needleBaseSize","needleBaseColor","needleWidth","needleSharp","needleColor","renderDial","opts","cX","cY","radius","defineTick","tX1","Math","max","tX2","renderTicks","tickAngles","i","push","map","tickAngle","idx","renderProgress","offset","circumference","renderNeedle","x1","y1","x2","y2","x3","diameter","y3","needleAngle","needleElm","renderText","render","Object","assign","props","PI","className"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n\nconst TICK_ID = 'tick';\n\nexport default class Gauge extends Component {\n\n   defaultProps = {\n    size: 200,\n\n    dialWidth: 10,\n    dialColor: '#eee',\n\n    tickLength: 3,\n    tickWidth: 1,\n    tickColor: '#cacaca',\n    tickInterval: 10,\n\n    maximumValue: 150,\n    currentValue: 0,\n    progressWidth: 5,\n    progressColor: '#3d3d3d',\n    progressRoundedEdge: true,\n    downProgressColor: 'red',\n    progressFont: 'Serif',\n    progressFontSize: '40',\n\n    needle: true,\n    needleBaseSize: 5,\n    needleBaseColor: '#9d9d9d',\n    needleWidth: 2,\n    needleSharp: false,\n    needleColor: '#8a8a8a'\n};\n    renderDial = (opts) => {\n        return (\n            <circle\n                cx={opts.cX}\n                cy={opts.cY}\n                r={opts.radius}\n                fill='none'\n                stroke={opts.dialColor}\n                strokeWidth={opts.dialWidth}\n            >\n            </circle>\n        )\n    };\n\n    defineTick = (opts) => {\n        let tX1 = opts.cX + opts.radius - (Math.max(opts.dialWidth, opts.progressWidth) / 2);\n        let tX2 = tX1 - opts.tickLength;\n\n        return (<line\n            id={TICK_ID}\n            x1={tX1}\n            y1={opts.cY}\n            x2={tX2}\n            y2={opts.cY}\n            stroke={opts.tickColor}\n            strokeWidth={opts.tickWidth}\n        />);\n    };\n\n    renderTicks = (opts) => {\n        let tickAngles = [];\n        for (let i = 0; i <= 360; i += opts.tickInterval) {\n            tickAngles.push(i);\n        }\n        return (\n            <g className='ticks'>\n                {\n                    tickAngles.map((tickAngle, idx) => {\n                        return <use\n                            href={`#${TICK_ID}`}\n                            key={`tick-${idx}`}\n                            transform={`rotate(${tickAngle} ${opts.cX} ${opts.cY})`}\n                        />\n                    })\n                }\n            </g>\n        )\n    };\n\n    renderProgress = (opts) => {\n\n        let offset = (opts.circumference * (1 - (opts.currentValue / 100)));\n\n        return (\n            <circle\n                cx={opts.cX}\n                cy={opts.cY}\n                r={opts.radius}\n                fill='none'\n                stroke={opts.progressColor}\n                strokeWidth={opts.progressWidth}\n                strokeDasharray={opts.circumference}\n                strokeDashoffset={offset}\n                strokeLinecap={opts.progressRoundedEdge ? 'round' : 'butt'}\n            />\n        )\n    };\n\n    renderNeedle = (opts) => {\n\n        let\n            x1 = opts.cX,\n            y1 = opts.cY - (opts.needleWidth / 2),\n            x2 = opts.cX,\n            y2 = opts.cY + (opts.needleWidth / 2),\n            x3 = opts.diameter,\n            y3 = opts.cY,\n            needleAngle = (360 * opts.currentValue) / 100;\n\n        let needleElm = null;\n        if (opts.needleSharp) {\n            needleElm = (\n                <polygon\n                    points={`${x1},${y1} ${x2},${y2} ${x3},${y3}`}\n                    fill={opts.needleColor}\n                >\n\n                </polygon>\n            );\n        } else {\n            needleElm = (\n                <line\n                    x1={opts.cX}\n                    y1={opts.cY}\n                    x2={opts.diameter}\n                    y2={opts.cY}\n                    fill='none'\n                    strokeWidth={opts.needleWidth}\n                    stroke={opts.needleColor}\n                />\n            );\n        }\n\n        return (\n            <g className='needle'>\n                <g transform={`rotate(${needleAngle} ${opts.cX} ${opts.cY})`}>\n                    {needleElm}\n                </g>\n                <circle\n                    cx={opts.cX}\n                    cy={opts.cY}\n                    r={opts.needleBaseSize}\n                    fill={opts.needleBaseColor}\n                >\n                </circle>\n            </g>\n        )\n\n    };\n\n    renderText = (opts) => {\n        return (\n            <text\n                x={opts.cX}\n                y={opts.cY + 55}\n                fontFamily={opts.progressFont}\n                fontSize={opts.progressFontSize}\n                transform={`rotate(90 ${opts.cX} ${opts.cY})`}\n                textAnchor=\"middle\"\n                fill={opts.progressColor}\n            >\n                {opts.currentValue}\n            </text>\n        )\n    };\n\n\n\n    render() {\n\n        let opts = Object.assign({}, this.props);\n\n       \n        \n        let {\n            size,\n            dialWidth,\n        } = opts;\n\n        let cX = size / 2;\n        let cY = size / 2;\n        let radius = (size - (2 * dialWidth)) / 2;\n        let diameter = 2 * radius;\n        let circumference = 2 * Math.PI * radius;\n        opts = Object.assign(opts, {\n            cX,\n            cY,\n            radius,\n            diameter,\n            circumference\n        });\n\n       \n\n        return (\n          <div> \n          <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className={opts.className}\n                height={size}\n                width={size}\n                viewBox={`0 0 ${size} ${size}`}\n            >\n                <defs>\n                    {this.defineTick(opts)}\n                </defs>\n                <g transform={`rotate(-90 ${cX} ${cY})`}>\n                    {this.renderDial(opts)}\n                    {this.renderTicks(opts)}\n                    {this.renderProgress(opts)}\n                    {this.renderNeedle(opts)}\n                    {this.renderText(opts)}\n                </g>\n            </svg>\n            <p>{opts.currentValue}</p>\n            </div>\n        )\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}