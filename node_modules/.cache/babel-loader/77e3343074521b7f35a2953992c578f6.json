{"ast":null,"code":"var _jsxFileName = \"/Users/jasonyellow/Desktop/project/WN_APP/wn_app/src/component/Gauge.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TICK_ID = 'tick';\nexport default class Gauge extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderDial = opts => {\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: opts.cX,\n        cy: opts.cY,\n        r: opts.radius,\n        fill: \"none\",\n        stroke: opts.dialColor,\n        strokeWidth: opts.dialWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.defineTick = opts => {\n      let tX1 = opts.cX + opts.radius - Math.max(opts.dialWidth, opts.progressWidth) / 2;\n      let tX2 = tX1 - opts.tickLength;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        id: TICK_ID,\n        x1: tX1,\n        y1: opts.cY,\n        x2: tX2,\n        y2: opts.cY,\n        stroke: opts.tickColor,\n        strokeWidth: opts.tickWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this);\n    };\n\n    this.renderTicks = opts => {\n      let tickAngles = [];\n\n      for (let i = 0; i <= 360; i += opts.tickInterval) {\n        tickAngles.push(i);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"ticks\",\n        children: tickAngles.map((tickAngle, idx) => {\n          return /*#__PURE__*/_jsxDEV(\"use\", {\n            href: `#${TICK_ID}`,\n            transform: `rotate(${tickAngle} ${opts.cX} ${opts.cY})`\n          }, `tick-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderProgress = opts => {\n      let offset = opts.circumference * (1 - opts.currentValue / 100);\n      return /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: opts.cX,\n        cy: opts.cY,\n        r: opts.radius,\n        fill: \"none\",\n        stroke: opts.progressColor,\n        strokeWidth: opts.progressWidth,\n        strokeDasharray: opts.circumference,\n        strokeDashoffset: offset,\n        strokeLinecap: opts.progressRoundedEdge ? 'round' : 'butt'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderNeedle = opts => {\n      let x1 = opts.cX,\n          y1 = opts.cY - opts.needleWidth / 2,\n          x2 = opts.cX,\n          y2 = opts.cY + opts.needleWidth / 2,\n          x3 = opts.diameter,\n          y3 = opts.cY,\n          needleAngle = 360 * opts.currentValue / 100;\n      let needleElm = null;\n\n      if (opts.needleSharp) {\n        needleElm = /*#__PURE__*/_jsxDEV(\"polygon\", {\n          points: `${x1},${y1} ${x2},${y2} ${x3},${y3}`,\n          fill: opts.needleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this);\n      } else {\n        needleElm = /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: opts.cX,\n          y1: opts.cY,\n          x2: opts.diameter,\n          y2: opts.cY,\n          fill: \"none\",\n          strokeWidth: opts.needleWidth,\n          stroke: opts.needleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"needle\",\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(${needleAngle} ${opts.cX} ${opts.cY})`,\n          children: needleElm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: opts.cX,\n          cy: opts.cY,\n          r: opts.needleBaseSize,\n          fill: opts.needleBaseColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.renderText = opts => {\n      return /*#__PURE__*/_jsxDEV(\"text\", {\n        x: opts.cX,\n        y: opts.cY + 55,\n        fontFamily: opts.progressFont,\n        fontSize: opts.progressFontSize,\n        transform: `rotate(90 ${opts.cX} ${opts.cY})`,\n        textAnchor: \"middle\",\n        fill: opts.progressColor,\n        children: opts.currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  render() {\n    let opts = Object.assign({}, this.props);\n    let {\n      size,\n      dialWidth\n    } = opts;\n    let cX = size / 2;\n    let cY = size / 2;\n    let radius = (size - 2 * dialWidth) / 2;\n    let diameter = 2 * radius;\n    let circumference = 2 * Math.PI * radius;\n    opts = Object.assign(opts, {\n      cX,\n      cY,\n      radius,\n      diameter,\n      circumference\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: opts.className,\n        height: size,\n        width: size,\n        viewBox: `0 0 ${size} ${size}`,\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: this.defineTick(opts)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `rotate(-90 ${cX} ${cY})`,\n          children: [this.renderDial(opts), this.renderTicks(opts), this.renderProgress(opts), this.renderNeedle(opts), this.renderText(opts)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: opts.currentValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }, this);\n  }\n\n}\nGauge.defaultProps = {\n  size: 200,\n  dialWidth: 10,\n  dialColor: '#eee',\n  tickLength: 3,\n  tickWidth: 1,\n  tickColor: '#cacaca',\n  tickInterval: 10,\n  maximumValue: 150,\n  currentValue: 0,\n  progressWidth: 5,\n  progressColor: '#3d3d3d',\n  progressRoundedEdge: true,\n  downProgressColor: 'red',\n  progressFont: 'Serif',\n  progressFontSize: '40',\n  needle: true,\n  needleBaseSize: 5,\n  needleBaseColor: '#9d9d9d',\n  needleWidth: 2,\n  needleSharp: false,\n  needleColor: '#8a8a8a'\n};","map":{"version":3,"sources":["/Users/jasonyellow/Desktop/project/WN_APP/wn_app/src/component/Gauge.js"],"names":["React","Component","TICK_ID","Gauge","renderDial","opts","cX","cY","radius","dialColor","dialWidth","defineTick","tX1","Math","max","progressWidth","tX2","tickLength","tickColor","tickWidth","renderTicks","tickAngles","i","tickInterval","push","map","tickAngle","idx","renderProgress","offset","circumference","currentValue","progressColor","progressRoundedEdge","renderNeedle","x1","y1","needleWidth","x2","y2","x3","diameter","y3","needleAngle","needleElm","needleSharp","needleColor","needleBaseSize","needleBaseColor","renderText","progressFont","progressFontSize","render","Object","assign","props","size","PI","className","defaultProps","maximumValue","downProgressColor","needle"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\n\nconst TICK_ID = 'tick';\n\nexport default class Gauge extends Component {\n\n    renderDial = (opts) => {\n        return (\n            <circle\n                cx={opts.cX}\n                cy={opts.cY}\n                r={opts.radius}\n                fill='none'\n                stroke={opts.dialColor}\n                strokeWidth={opts.dialWidth}\n            >\n            </circle>\n        )\n    };\n\n    defineTick = (opts) => {\n        let tX1 = opts.cX + opts.radius - (Math.max(opts.dialWidth, opts.progressWidth) / 2);\n        let tX2 = tX1 - opts.tickLength;\n\n        return (<line\n            id={TICK_ID}\n            x1={tX1}\n            y1={opts.cY}\n            x2={tX2}\n            y2={opts.cY}\n            stroke={opts.tickColor}\n            strokeWidth={opts.tickWidth}\n        />);\n    };\n\n    renderTicks = (opts) => {\n        let tickAngles = [];\n        for (let i = 0; i <= 360; i += opts.tickInterval) {\n            tickAngles.push(i);\n        }\n        return (\n            <g className='ticks'>\n                {\n                    tickAngles.map((tickAngle, idx) => {\n                        return <use\n                            href={`#${TICK_ID}`}\n                            key={`tick-${idx}`}\n                            transform={`rotate(${tickAngle} ${opts.cX} ${opts.cY})`}\n                        />\n                    })\n                }\n            </g>\n        )\n    };\n\n    renderProgress = (opts) => {\n\n        let offset = (opts.circumference * (1 - (opts.currentValue / 100)));\n\n        return (\n            <circle\n                cx={opts.cX}\n                cy={opts.cY}\n                r={opts.radius}\n                fill='none'\n                stroke={opts.progressColor}\n                strokeWidth={opts.progressWidth}\n                strokeDasharray={opts.circumference}\n                strokeDashoffset={offset}\n                strokeLinecap={opts.progressRoundedEdge ? 'round' : 'butt'}\n            />\n        )\n    };\n\n    renderNeedle = (opts) => {\n\n        let\n            x1 = opts.cX,\n            y1 = opts.cY - (opts.needleWidth / 2),\n            x2 = opts.cX,\n            y2 = opts.cY + (opts.needleWidth / 2),\n            x3 = opts.diameter,\n            y3 = opts.cY,\n            needleAngle = (360 * opts.currentValue) / 100;\n\n        let needleElm = null;\n        if (opts.needleSharp) {\n            needleElm = (\n                <polygon\n                    points={`${x1},${y1} ${x2},${y2} ${x3},${y3}`}\n                    fill={opts.needleColor}\n                >\n\n                </polygon>\n            );\n        } else {\n            needleElm = (\n                <line\n                    x1={opts.cX}\n                    y1={opts.cY}\n                    x2={opts.diameter}\n                    y2={opts.cY}\n                    fill='none'\n                    strokeWidth={opts.needleWidth}\n                    stroke={opts.needleColor}\n                />\n            );\n        }\n\n        return (\n            <g className='needle'>\n                <g transform={`rotate(${needleAngle} ${opts.cX} ${opts.cY})`}>\n                    {needleElm}\n                </g>\n                <circle\n                    cx={opts.cX}\n                    cy={opts.cY}\n                    r={opts.needleBaseSize}\n                    fill={opts.needleBaseColor}\n                >\n                </circle>\n            </g>\n        )\n\n    };\n\n    renderText = (opts) => {\n        return (\n            <text\n                x={opts.cX}\n                y={opts.cY + 55}\n                fontFamily={opts.progressFont}\n                fontSize={opts.progressFontSize}\n                transform={`rotate(90 ${opts.cX} ${opts.cY})`}\n                textAnchor=\"middle\"\n                fill={opts.progressColor}\n            >\n                {opts.currentValue}\n            </text>\n        )\n    };\n\n\n\n    render() {\n\n        let opts = Object.assign({}, this.props);\n\n       \n        \n        let {\n            size,\n            dialWidth,\n        } = opts;\n\n        let cX = size / 2;\n        let cY = size / 2;\n        let radius = (size - (2 * dialWidth)) / 2;\n        let diameter = 2 * radius;\n        let circumference = 2 * Math.PI * radius;\n        opts = Object.assign(opts, {\n            cX,\n            cY,\n            radius,\n            diameter,\n            circumference\n        });\n\n       \n\n        return (\n          <div> \n          <svg\n                xmlns='http://www.w3.org/2000/svg'\n                className={opts.className}\n                height={size}\n                width={size}\n                viewBox={`0 0 ${size} ${size}`}\n            >\n                <defs>\n                    {this.defineTick(opts)}\n                </defs>\n                <g transform={`rotate(-90 ${cX} ${cY})`}>\n                    {this.renderDial(opts)}\n                    {this.renderTicks(opts)}\n                    {this.renderProgress(opts)}\n                    {this.renderNeedle(opts)}\n                    {this.renderText(opts)}\n                </g>\n            </svg>\n            <p>{opts.currentValue}</p>\n            </div>\n        )\n    }\n}\n\nGauge.defaultProps = {\n    size: 200,\n\n    dialWidth: 10,\n    dialColor: '#eee',\n\n    tickLength: 3,\n    tickWidth: 1,\n    tickColor: '#cacaca',\n    tickInterval: 10,\n\n    maximumValue: 150,\n    currentValue: 0,\n    progressWidth: 5,\n    progressColor: '#3d3d3d',\n    progressRoundedEdge: true,\n    downProgressColor: 'red',\n    progressFont: 'Serif',\n    progressFontSize: '40',\n\n    needle: true,\n    needleBaseSize: 5,\n    needleBaseColor: '#9d9d9d',\n    needleWidth: 2,\n    needleSharp: false,\n    needleColor: '#8a8a8a'\n};\n\n"]},"metadata":{},"sourceType":"module"}